function [wl,mq,p,wt,tis] = model(N,Nd,Tn,Tk,lambda, hasToDisplay)

allQ = createTasks(N,lambda); % ќбщее количество за€вок на исполнение.
q = queue; % ‘ормирующа€с€ по ходу работы очередь. Ќужна дл€ расчЄта максимального количества за€вок в очереди.

d = createDevices(Nd,Tn,Tk); % »сполнительные устройства.

maxQ = 0; % ћаксимальное количество за€вок в очереди.
workTime = 0; % ¬рем€, истратевшеес€ на исполнение всех за€вок из очереди.
prostoi = 0; % ѕростой устройства (когда оно ничего не исполн€ет)
waiting = 0; % ¬рем€ ожидани€ за€вок в очереди (???)

time = 1; % ¬ самом деле - это больше похоже на индексацию за€вок.

while 1 % √лавный цикл приложени€, в котором происходит постановка за€вок в очередь и на исполнение.
    waiting = waiting + q.size();
    if q.size() > 0
        [flag,task] = q.getNext(-1);
        [flag2,task2] = allQ.getNext(time);
        if flag2 > 0
            q.add(task2);
            if maxQ < q.size()
                maxQ = q.size();
            end
        end
    else % —ледующа€ за€вка, котора€ берЄтс€ из общего потока, если формируема€ очередь в цикле ещЄ ни разу не заполн€лась.
        [flag,task] = allQ.getNext(time);
    end
    
    if flag == -1 %  онец цикла.
        break
    end
    if flag == 1 % ѕостановка за€вки из очереди на исполнение на устройстве.
        flag = 1;
        for j=1:1:Nd % Ќа каждое устройство, поставл€етс€ следующа€ за€вка, если это устройство на данной итерации цикла ничего не исполн€ет.
            if d(j).isEmpty(time)
                w = d(j).run(task,time);
                flag = 0;
                workTime = workTime + w; % ”величение количества времени, затрачиваемого на общую работу системы.
                break % ≈сли за€вка улетело в какое то устройство, что не зан€то - 
            end
        end

        if flag % 
            q.add(task);
            if maxQ < q.size()
                maxQ = q.size();
            end
        end
    else
        for j=1:1:Nd
            if  d(j).isEmpty(time)
                prostoi = prostoi + 1;
            end
        end
    end
    
    time = time + 1;
end

for i=1:1:Nd
    if d(i).timeEnd > time
        time = d(i).timeEnd;
    end
end

wl = waiting / time;
mq = maxQ;
p = prostoi / time;
wt = waiting / N;
tis = (waiting+workTime) / N;

    if hasToDisplay == 1
        % средн€€ длина очереди
        fprintf('Cредн€€ длина очереди %f \n',wl);    
        % максимальна€ длина очереди
        fprintf('ћаксимальна€ длина очереди %f \n',maxQ);    
        % простой
        fprintf("ѕростой %f \n",p);
        % среднее врем€ ожидани€
        fprintf('Cреднее врем€ ожидани€ %f \n',wt);    
        % среднее врем€ нахождени€ за€вки в системе
        fprintf('Cреднее врем€ нахождени€ за€вки в системе %f \n',tis);
    end
    
end

