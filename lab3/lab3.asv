%% Лабораторная работа №3
% Моделирование простой системы массового обслуживания.
%% Задание 1. Разработать структуру данных, позволяющую манипулировать упорядоченной по времени последовательности событий и производить необходимые расчёты.

% model - основная логика работы программы, симуляция СМО.
%%%

% device - прибор для обслуживания входящих заявок. 
%%%
% Обладает следующими параметрами:

%%%
% intervalStart - начало интервала обработки запроса.

%%%
% intervalEnd - конец интервала обработки запроса.

%%%
% timeStart - время начала обработки текущего задания из очереди.

%%%
% timeEnd - время конца обработки текущего задания из очереди.


% queue - очередь заявок.
%%% 
% Обладает следующими параметрами:

%%%
% tasks - набор заданий в очереди заявок.

% task - заявки, подаваемые на обработку.
%%%
% Обладает следующими параметрами:

%%%
% id - идентификатор заявки.

%%%
% start - время, в которое приступили к исполнению текущей заявки.

%%%
% desc - описание заявки.

%% Задание 2. Разработать модель СМО. Выбрать критерий остановки моделирования.
% Модель СМО представлена в файле model.m. Критерием остановки
% моделирования является исчерпывание количества заявок.

%% 
taskCount = 30;
deviceCount = 1;
intervalStart = 10;

true = 1;
false = 0;

calcService = calculationService;
%% Задание 3 + Задание 4. 
% Определить среднее время нахождения заявки в системе, среднее время ожидания в очереди, среднее время простоя обслуживающего прибора.
% Найти среднюю и максимальную длину очереди, учитывая при этом, что усреднение по множеству реализаций эквивалентно усреднению по времени.


N = 100;
Nd = 5;
Tn = 10;
Tk = 1000;
lambda = 10;

[wl,mq,p,wt,tis] = model(N,Nd,Tn,Tk,lambda, 1);
%% Задание 5. Исследовать зависимость от параметров модели величин, указанных в пунктах 3 и 4 задания. Параметрами модели являются плотность входного потока заявок и интервал распределения времени обработки.

clear all;
clean all;

N = 30;
Nd = 1;

Tn = 10;
lambda = 2;

[wl,mq,p,wt,tis, param_l] = calcService.callModelWithIncreasingFlow(N, Nd, Tn);
plotAll(param_l, 'Lambda');

[wl,mq,p,wt,tis,param_l] = calcService.callModelWithIncreasingInterval(N, Nd, Tn, lambda);
plotAll(param_l, 'Interval');

[wl,mq,p,wt,tis,param_l] = calcService.callModelWithIncreasingDeviceCount(N, Tn, lambda);
plotAll(param_l, 'Device Count');